(However, web architectures are subjective. its depend on the kind of system, organization preferences, level of complexity of the software you are building. The way you choose to layer your own might be different from mine.)

Being a Full-Stack Software Engineer means you’re comfortable interacting with any layer of the stack.

A way to easily assess this is to simply ask an engineer to explain how a software system works. They can have a general overview of the flow or can choose to dig deep in a certain area.

Have you ever wondered what happens when you type “www.google.com" or any other website you visit? internet of a thing don’t just happen by magic or miracle, a lot of processes were put in place for us to communicate with the internet (thanks to our internet forefathers).

well, a lot happens behind the scene and that is what I will explaining today. believe me, a standard website like www.google.com has tons of processes that occur behind the scene and make our searches easy and fast. The beauty of it all is that all these happen under 200 milliseconds(According to Google, the average response time should be under 200 milliseconds as it gives the feeling of an instant response.). This is really insane and terrific, the response is almost instantaneous.

In this blog post I will be explaining some concepts, processes or layers that occurs when you enter a website like google in your browser. some of these concept include:
DNS request
TCP/IP
Firewall
HTTPS/SSL
Load-balancer
Web server
Application server
Database.

When you type “www.google.com" in your web browser, your computer first contacts a DNS (Domain Name System)server to resolve the domain


name “www.google.com" into an IP address. (Note: before you get to DNS server, your internet service provider(ISP) make sure you have data on your device). The DNS server is responsible for translating human-readable domain names into the corresponding IP addresses used by computers to communicate over the internet. Once your computer receives the IP address from the DNS server, it can establish a connection with that IP address over the internet to access the website. Therefore, your computer connects to the DNS server first, and then it connects to the internet using the obtained IP address. the DNS server is like a look-up book, it accepts the name of the website you entered in your browser and look for the IP address of that name from its directory.


DNS server searching for your ip address
so what exactly is an IP address?
An IP address, which stands for Internet Protocol address, is a numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication. It serves two primary purposes:

Identification: An IP address uniquely identifies a device on a network, similar to how a phone number uniquely identifies a telephone. It allows other devices on the internet to locate and communicate with the device.

Routing: IP addresses are used to route data packets between devices across the internet. When you send a request to a website or any other online service, your data is divided into small packets, each containing the source and destination IP addresses. These packets are then routed through various network devices to reach their intended destination.

IP addresses are typically represented as a series of numbers separated by periods, such as “192.168.0.1” (IPv4 which is 32bits) or “2001:0db8:85a3:0000:0000:8a2e:0370:7334” (IPv6 which is 164bits). IPv4 addresses are more commonly used today but are being gradually replaced by IPv6 addresses due to the depletion of available IPv4 addresses.

Don't forget that after the DNS server returns the IP address of “google.com” the internet direct us to the server or simply the computer hosting Google's website information. at this point, the firewall comes in, The firewall acts as a security barrier between your computer and the internet. It filters incoming and outgoing network traffic based on predefined rules. When you initiate a request to “google.com,” your firewall may inspect the request and determine whether to allow or block the connection based on its configuration.

Still on our way to google.com, Once your request reaches Google’s server, the website responds using the HTTPS (Hypertext Transfer Protocol Secure) protocol, which encrypts the communication between your browser and the server. SSL (Secure Sockets Layer) or its successor TLS (Transport Layer Security) is used to establish a secure connection. This encryption protects your data from being intercepted or tampered with by unauthorized parties. this layer is very important for any website that want to keep user’s information secure on their website such as credit cards, password etc safe from hackers.

Load Balancer: so after google encrypt your data Google’s infrastructure typically employs load balancers to distribute incoming network traffic across multiple servers. Load balancers help optimize performance, prevent overload on individual servers, and improve reliability. When you make a request to “google.com,” the load balancer receives the request and routes it to an appropriate server based on factors like server availability, capacity, and traffic distribution algorithms.

what will happen if google did not have a load balancer layer, several consequences could arise:

Performance Impact: for a large company like google that receives millions of request in a second (Although Google does not share exact numbers, as reported by SEOTribunal.com, Google handles 3.8 million searches per minute on average across the globe. That comes out to 228 million searches per hour, 5.6 billion searches per day, or 2 trillion searches per year!) imagine google has only one server handling all these request, thats hell! Load balancers distribute incoming traffic across multiple servers, allowing for efficient resource utilization and preventing overloading of individual servers. Without a load balancer, Google’s servers may experience higher loads, leading to degraded performance and slower response times for users(imagine you recieving the result of your search after many hours!)

Scalability Challenges: Load balancers facilitate horizontal scalability by adding or removing servers based on demand. Without load balancing, scaling the infrastructure would become more complex and less flexible. Google might struggle to efficiently handle increased traffic or adapt to changing user demands.

Single Point of Failure: Load balancers provide high availability and fault tolerance by redirecting traffic to healthy servers in case of server failures. Without load balancing, a server failure could result in a complete loss of service for users accessing the affected server, causing disruptions and potential downtime.

Uneven Workload Distribution: Load balancers ensure even distribution of traffic across servers, preventing certain servers from becoming overloaded while others remain underutilized. Without load balancing, some servers might handle a disproportionate amount of traffic, leading to inefficiencies and potential performance bottlenecks.

In summary, a load balancer plays a crucial role in optimizing performance, scalability, and fault tolerance in large-scale web services like Google. Its absence would likely result in reduced performance, scalability challenges, increased risk of service disruptions, and an uneven distribution of workload among servers.

Now, on the server of google sits the Web server and the Application server.

what is a web server and its function? A web server is responsible for handling HTTP requests and delivering static content (such as HTML files, images, CSS, and JavaScript) to clients, typically web browsers. Its primary function is to host and serve web pages and static resources. Web servers are optimized for handling large volumes of simple HTTP requests and are designed to efficiently serve static content. in short, the web server help in hosting the front-end.

An application server, on the other hand, provides an environment for executing and managing dynamic, server-side applications. It offers additional services and capabilities beyond what a web server provides, enabling the execution of complex business logic, processing of dynamic data, and supporting various application frameworks and technologies. in short, the application server hosts the back-end of the website.
the Application server is responsible for communicating with the database. Programming languages such as PHP, Python, Node.js etc are stored in the application server.

finally on the concept we'll cover in this blog which the database.

what is a database?
database is used to Stores, manage, and retrieve data efficiently. Databases play a crucial role in handling dynamic content, user interactions, and backend operations. the database is responsible for storing all the information that google gives back to you. They support functions such as storing user data, handling search indexes, serving ads, processing user queries, and managing logs and analytics. Databases ensure efficient data storage, retrieval, and management, enabling Google to deliver relevant and personalized experiences to its users.

By now I am sure you would have an gotten the flow and different layers that exist when you make a request to a website like google.com and other big software companies websites. Moreover, this is an introductory blog to web architecture framework. in depth explanation and implementation of all these layers are part of my future plans.

Thanks for reading, feel free to like, comment, and share.
